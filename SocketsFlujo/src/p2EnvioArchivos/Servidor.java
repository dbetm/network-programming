package p2EnvioArchivos;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import javax.swing.JFileChooser;

/**
 *
 * @author david
 */
public class Servidor extends javax.swing.JFrame {
    // Atributos
    private int puerto;
    private ServerSocket servidor;
    private Socket cliente;
    private Recepcion bandejaEntrada;
    
    public Servidor() {
        initComponents();
        // Por defecto se asiga el 4605 si no se pone alguno
        this.puerto = 4605;
        this.servidor = null;
        this.cliente = null;
        this.bandejaEntrada = null;
        // Deshabilitamos el botón de detener
        this.btnDetener.setEnabled(false);
        this.btnEnviar.setEnabled(false);
        this.btnActualizar.setEnabled(false);
        this.cbxRecibir.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblStatus = new javax.swing.JLabel();
        lblEstado = new javax.swing.JLabel();
        txtPuerto = new javax.swing.JTextField();
        lblPort = new javax.swing.JLabel();
        btnIniciar = new javax.swing.JButton();
        btnEnviar = new javax.swing.JButton();
        cbxRecibir = new javax.swing.JCheckBox();
        btnActualizar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListFiles = new javax.swing.JList<>();
        lblNotify = new javax.swing.JLabel();
        lblNotificacion = new javax.swing.JLabel();
        btnCerrar = new javax.swing.JButton();
        btnDetener = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Servidor");
        setResizable(false);

        lblStatus.setText("Estado:");

        lblEstado.setText("No conectado");

        txtPuerto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPuertoActionPerformed(evt);
            }
        });

        lblPort.setText("Puerto:");

        btnIniciar.setFont(new java.awt.Font("DejaVu Sans", 0, 16)); // NOI18N
        btnIniciar.setText("Iniciar");
        btnIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarActionPerformed(evt);
            }
        });

        btnEnviar.setFont(new java.awt.Font("DejaVu Sans", 0, 16)); // NOI18N
        btnEnviar.setText("Enviar archivo");
        btnEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarActionPerformed(evt);
            }
        });

        cbxRecibir.setFont(new java.awt.Font("DejaVu Sans", 0, 16)); // NOI18N
        cbxRecibir.setText("Recibir archivos");
        cbxRecibir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxRecibirActionPerformed(evt);
            }
        });

        btnActualizar.setFont(new java.awt.Font("DejaVu Sans", 0, 16)); // NOI18N
        btnActualizar.setText("Actualizar lista");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        jListFiles.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Actualiza para ver los archivos compartidos..."};
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jListFiles.setOpaque(false);
        jListFiles.setSelectionBackground(new java.awt.Color(0, 0, 0));
        jListFiles.setSelectionForeground(new java.awt.Color(51, 255, 51));
        jListFiles.setVerifyInputWhenFocusTarget(false);
        jScrollPane1.setViewportView(jListFiles);

        lblNotify.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        lblNotify.setText("Notificación:");

        lblNotificacion.setForeground(new java.awt.Color(0, 102, 102));
        lblNotificacion.setText("Sin eventos");

        btnCerrar.setText("Cerrar");
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });

        btnDetener.setFont(new java.awt.Font("DejaVu Sans", 0, 16)); // NOI18N
        btnDetener.setText("Detener");
        btnDetener.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetenerActionPerformed(evt);
            }
        });

        jLabel2.setText("Archivos que me han compartido:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblNotify)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblNotificacion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnEnviar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblStatus)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblEstado))
                            .addComponent(btnActualizar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbxRecibir, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblPort)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtPuerto, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(49, 49, 49)
                                .addComponent(btnIniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40)
                                .addComponent(btnDetener, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStatus)
                    .addComponent(lblEstado)
                    .addComponent(lblPort)
                    .addComponent(txtPuerto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnIniciar)
                    .addComponent(btnDetener))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxRecibir)
                    .addComponent(jLabel2))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnEnviar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNotify)
                            .addComponent(lblNotificacion))
                        .addGap(22, 22, 22))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCerrar)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtPuertoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPuertoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPuertoActionPerformed

    private void btnIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarActionPerformed
        try {
            // Habilitamos los siguientes botones
            this.btnDetener.setEnabled(true);
            this.btnIniciar.setEnabled(false);
            // Instanciamos el servidor
            this.puerto = obtenerPuerto();
            this.servidor = new ServerSocket(this.puerto);
            // Esperamos que un cliente se conecte
            this.cliente = this.servidor.accept();
            // Volvemos a habilitar los botones
            this.btnDetener.setEnabled(true);
            this.btnEnviar.setEnabled(true);
            this.btnActualizar.setEnabled(true);
            this.cbxRecibir.setEnabled(true);
            this.lblEstado.setText("Conectado");
        } 
        catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnIniciarActionPerformed

    
    
    private void btnDetenerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetenerActionPerformed
        try {
            // Cerramos la conexión si no está cerrada
            if(!this.cliente.isClosed()) this.cliente.close();
            // Volvemos a habilitar los botones
            this.btnDetener.setEnabled(false);
            this.btnEnviar.setEnabled(false);
            this.btnActualizar.setEnabled(false);
            this.cbxRecibir.setEnabled(false);
            this.lblEstado.setText("No conectado");
            this.txtPuerto.setEnabled(true);
            this.btnIniciar.setEnabled(true);
        } 
        catch (IOException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnDetenerActionPerformed

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        // Terminamos el hilo de recepción
        if(this.bandejaEntrada != null) {
            this.bandejaEntrada.interrumpir();
            this.bandejaEntrada = null;
        }
        this.dispose();
    }//GEN-LAST:event_btnCerrarActionPerformed

    private void cbxRecibirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxRecibirActionPerformed
        if(this.cbxRecibir.isSelected()) {
            // Habilitamos el poder recibir archivos
            this.bandejaEntrada = new Recepcion(this.servidor, this.cliente, 
                this.lblEstado, this.lblNotificacion);
        }
        else {
            this.lblNotificacion.setText("Sin eventos");
            this.bandejaEntrada.interrumpir();
            this.bandejaEntrada = null;
        }
    }//GEN-LAST:event_cbxRecibirActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        // Actualizar la lista de ficheros
        File files = new File("files/p2/");
        String lista[] = files.list();
        this.jListFiles.removeAll();
        this.jListFiles.setListData(lista);
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarActionPerformed
        BufferedInputStream bis;
        BufferedOutputStream bos;
        int len;
        byte[] buffer;
        // Se selecciona el fichero a transferir
        JFileChooser file = new JFileChooser();
        file.showOpenDialog(file);
        File localFile = file.getSelectedFile();
        if(!this.cliente.isClosed())
            try {
                // Canales
                    // Flujo de bytes del archivo, entrada local
                bis = new BufferedInputStream(new FileInputStream(localFile));
                    // Flujo de bytes del archivo, que se envía remotamente
                bos = new BufferedOutputStream(this.cliente.getOutputStream());
                
                // Canal de salida para enviar el nombre del archivo
                DataOutputStream dos = new DataOutputStream(this.cliente.getOutputStream());
                
                // Se envía el nombre del fichero como texto plano
                String cadenas[] = localFile.getName().split("/");
                String nombreArchivo = cadenas[cadenas.length - 1];
                dos.writeUTF(nombreArchivo);

                //Enviamos el fichero en paquetes de 1024 bytes
                buffer = new byte[1024];
                while ((len = bis.read(buffer)) != -1){
                    bos.write(buffer, 0,len);
                }
                // Notificamos del envío
                this.lblNotificacion.setText("Has enviado: " + nombreArchivo);
                // Cerramos los canales
                bis.close();
                bos.close();
            } 
            catch (Exception e) {
                e.printStackTrace();
            }
    }//GEN-LAST:event_btnEnviarActionPerformed
    
    private int obtenerPuerto() {
        int port = this.puerto; // por default se selecciona el 4065
        try {
            port = Integer.parseInt(this.txtPuerto.getText());
        } 
        catch (NumberFormatException e) {
            this.txtPuerto.setText(Integer.toString(port));
        }
        return port;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Servidor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnCerrar;
    private javax.swing.JButton btnDetener;
    private javax.swing.JButton btnEnviar;
    private javax.swing.JButton btnIniciar;
    private javax.swing.JCheckBox cbxRecibir;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jListFiles;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblEstado;
    private javax.swing.JLabel lblNotificacion;
    private javax.swing.JLabel lblNotify;
    private javax.swing.JLabel lblPort;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTextField txtPuerto;
    // End of variables declaration//GEN-END:variables
}
