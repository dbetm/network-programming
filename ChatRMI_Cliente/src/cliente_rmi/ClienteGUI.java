package cliente_rmi;

import interfaces.InterfazCliente;
import interfaces.InterfazServidor;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author david
 */
public class ClienteGUI extends javax.swing.JFrame implements Runnable {
    private InterfazServidor servidor;
    private Cliente cliente;
    private Thread controlRefrescarListaClientes;
    /**
     * Creates new form ClienteGUI
     */
    public ClienteGUI() {
        initComponents();
        // Deshabilitar el área de mensaje, botón enviar y textArea de mensajes
        this.txtMensaje.setEnabled(false);
        this.btnEnviar.setEnabled(false);
        this.txtAreaMensajes.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtHost = new javax.swing.JTextField();
        btnConectar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaMensajes = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        listClientesActivos = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        txtMensaje = new javax.swing.JTextField();
        btnEnviar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Username:");

        jLabel2.setText("IP Servidor:");

        btnConectar.setText("Conectar");
        btnConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConectarActionPerformed(evt);
            }
        });

        txtAreaMensajes.setColumns(20);
        txtAreaMensajes.setRows(5);
        jScrollPane1.setViewportView(txtAreaMensajes);

        jScrollPane2.setViewportView(listClientesActivos);

        jLabel3.setText("Clientes activos:");

        txtMensaje.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMensajeKeyPressed(evt);
            }
        });

        btnEnviar.setForeground(new java.awt.Color(0, 153, 153));
        btnEnviar.setText("ENVIAR");
        btnEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
                            .addComponent(txtMensaje)
                            .addComponent(btnEnviar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtHost, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnConectar, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConectar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEnviar))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane2)))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConectarActionPerformed
        if(this.btnConectar.getText().equals("Conectar")) {
            if(this.txtUsername.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Debes poner un nombre de IP");
                return;
            }
            if(this.txtHost.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Debes poner una IP");
                return;
            }
            
            try {
                // Crear el cliente
                this.cliente = new Cliente(this.txtUsername.getText());
                this.cliente.setGUI(this);
                // Ubicar al servidor
                Registry reg = LocateRegistry.getRegistry(this.txtHost.getText(), 1099);
                this.servidor = (InterfazServidor) reg.lookup("servidor");
                // Registramos el cliente en el servidor
                this.servidor.registrar(this.cliente);
                actualizarListaClientes(this.servidor.obtenerClientesActivos());
            }
            catch (RemoteException s) {
                s.printStackTrace();
            }
            catch (NotBoundException ex) {
                ex.printStackTrace();
            }
            
            // Lanzamos el hilo para que esté refrescando periódicamente la lista
            // de clientes
            this.controlRefrescarListaClientes = new Thread(this);
            this.controlRefrescarListaClientes.start();
            
            this.txtHost.setEnabled(false);
            this.txtUsername.setEnabled(false);
            this.btnConectar.setText("Desconectar");
            this.txtMensaje.setEnabled(true);
            this.btnEnviar.setEnabled(true);
            this.txtAreaMensajes.setEnabled(true);
        }
        else { // DESCONECTAR
            try {
                this.servidor.borrarCliente(cliente);
            }
            catch (RemoteException ex) {
                ex.printStackTrace();
            }
            // Detenemos el hilo que refresca la lista
            this.controlRefrescarListaClientes.interrupt();
            // Cambiamos el estado de algunos componentes
            this.txtHost.setEnabled(true);
            this.txtUsername.setEnabled(true);
            this.btnConectar.setText("Conectar");
            this.txtMensaje.setEnabled(false);
            this.btnEnviar.setEnabled(false);
            this.txtAreaMensajes.setEnabled(false);
            // Limpiamos el área de mensajes y el campo para el mensaje
            this.txtMensaje.setText("");
            this.txtAreaMensajes.setText("");
            try {
                // Borramos la lista
                actualizarListaClientes(null);
            }
            catch (RemoteException ex) {
               ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnConectarActionPerformed

    public void actualizarAreaMensajes(String texto) {
        this.txtAreaMensajes.append("\n" + texto);
    }
    
    private void btnEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarActionPerformed
        if(!this.txtMensaje.getText().isEmpty()) { // si no está vacío
            try {
                // Mandamos el mensaje en forma:
                // [nombreDeUsuario] dice: [contenido del mensaje]
                this.servidor.publicar(this.cliente.getNombre()+ " dice : " + 
                    this.txtMensaje.getText());
                this.txtMensaje.setText("");
            }
            catch (RemoteException ex) {
                Logger.getLogger(ClienteGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnEnviarActionPerformed

    // Para que permita al enviar dando ENTER
    private void txtMensajeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMensajeKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            this.btnEnviar.doClick();
        }
    }//GEN-LAST:event_txtMensajeKeyPressed
    
    private void actualizarListaClientes(Vector clientesActivos) throws RemoteException {
        DefaultListModel modelo = new DefaultListModel();
        if(clientesActivos != null) {
            for (int i = 0; i < clientesActivos.size(); i++) {
                String nombreUsuario = 
                    ((InterfazCliente)clientesActivos.get(i)).getNombre();
                modelo.addElement(nombreUsuario);
            }
        }
        this.listClientesActivos.setModel(modelo);
    }
    
    @Override
    public void run() {
        while(true) {
            try {
                Thread.sleep(1000);
                if(this.btnConectar.getText().equals("Desconectar")) {
                    actualizarListaClientes(this.servidor.obtenerClientesActivos());
                }   
            }
            catch (InterruptedException ex) {
                ex.printStackTrace();
            }
            catch (RemoteException ex) {
                ex.printStackTrace();
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClienteGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClienteGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClienteGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClienteGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClienteGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConectar;
    private javax.swing.JButton btnEnviar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> listClientesActivos;
    private javax.swing.JTextArea txtAreaMensajes;
    private javax.swing.JTextField txtHost;
    private javax.swing.JTextField txtMensaje;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables

}
